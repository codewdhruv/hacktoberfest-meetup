{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/Fundme.sol": {
      "content": "//Get funds from the user\n//withdraw funds\n//Set a minimum value in USD\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n    error Fundme__NotOwner();\ncontract Fundme{\n\n    using PriceConverter for uint256;\n    uint256 public constant minimumUsd=50 * 1e18; //(1*10)**18\n    address[] public funders;\n    mapping(address=> uint256) public addressToAmountFunded;\n    AggregatorV3Interface public priceFeed;\n  address public immutable owner;\n    constructor(address priceFeedAddress){\n        owner =msg.sender;\n        priceFeed=AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable{\n        //want to able to set a minimum fund amount\n        //1. How do we send eth to this contract?\n\n        require(msg.value.getConversionRate(priceFeed) >= minimumUsd,\"Didn't send enough\");\n        //18 decimals\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender]+=msg.value;\n    }\n   \n    function withdraw() public onlyOwner{\n        \n        //for loop\n        //[1,2,3,4]\n        for(uint256 funderIndex=0; funderIndex<funders.length; funderIndex++){\n            //Code\n            address funder=funders[funderIndex];\n            addressToAmountFunded[funder]=0;\n        }\n        //rest the array\n        funders =new address[](0);\n        //actually withdraw the funds\n        //transfer\n        //by using transfer method we can send ethereum to the who call the withdraw() function \n        //msg.sender=address\n        //payable(msg.sender)=payable address\n        // payable(msg.sender).transfer(address(this).balance);\n        //send\n        // bool sendSuccess =payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess,\"Send Failed\");\n        //call\n        (bool callSuccess,)=payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess,\"call Failed\");\n    }\n    modifier onlyOwner{\n        // require(msg.sender==owner,\"sender is not owner\");\n        //The below code is custome error and it is more code efficient\n        if(msg.sender !=owner ){\n            revert Fundme__NotOwner();\n        }\n        _;\n    }\n    //What happens if someone sends this contract ETH without calling the fund function\n    //Two special functions\n    receive() external payable{\n        fund();\n    }\n    fallback() external payable{\n        fund();\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n //function to get the price in terms of usd\n pragma solidity ^0.8.8;\n import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n library PriceConverter{\n    function getPrice(AggregatorV3Interface priceFeed) internal view  returns(uint256){\n        //Address  0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        //ABI\n        // AggregatorV3Interface priceFeed=AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (,int256 price,,,)=priceFeed.latestRoundData();\n        //ETH in terms of USD\n        //3000.00000000\n        //If you check the documentation from where the code there it clearly said that it will return 8 decimal values so to just match this because upper value is 18 decimal . \n        //So here we need to multiply with 10^10 \n        return uint256(price*1e10); //10**10=10000000000\n    }\n    //So the getConversionRate function used to convert the Ethereum to the USD\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal  view returns(uint256){\n        uint256 ethPrice=getPrice(priceFeed);\n        //Here we divided it with 10^18 because the two variables are in the form of 1e18 that means result is in the form 1e36\n        //But we need the answer in 1e18 form . So,we just divided it with 1e18\n        uint256 ethAmountInUsd=(ethPrice * ethAmount) / 1e18; //if we don't divide it then it would be 36 decimal value\n        return ethAmountInUsd;\n    }\n }"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}